linear search
    from left to right or right to left

binary search
    using sorted array, start in middle, if it's what i'm looking for return true
    if it's to the left, use left half of array
    if it's to the right, use the right half of array
    repeat until element i'm lookin for is found

*but how do we get an array or data set sorted?

bubble sort
    the highest number tends to bubble to the top so to speak

    repeat until no swaps
        for i from 0 to n-2
            if i'th and i+1'th elements out of order
                swap them

selection sort
    select the first number, compare to another, if smaller select that instead
    once through the entire array, the smallest number in hand goes in first spot

    for i from 0 to n-1
        find the smallest element between i'th and n-1th
        swap the smallest with the i'th element

insertion sort

    for i from 1 to n-1
        call 0'th through i-1'th elements the "sorted side"
        remove the i'th elements
        insert it into the sorted side in order

algorithms have running time associated with them

    bubble sort
        (n - 1) + (n - 2) + (n - 3) + ... + 1
        n(n - 1)/2
        n^2/2 - n/2

big o notation - an upper bound on an algorithms run time (worst case)
    O(n^2)
    O(n log n) - merge sort
    O(n) - linear search has a running time on the order of n
    O(log n) -  binary search has a running time on the order of log n
    O(1) - symbolizes a constant step

omega notation - lower bound on an algorithms running time (best case)
    Ω(n^2)
    Ω(n log n)
    Ω(n) - bubble sort is minimally omega of n because it has to run through the list at least once
    Ω(log n)
    Ω(1) - linear search, binary search has the possibility of taking just one step

theta notation - upper bound and lower bound are the same

recursion - the act of a function calling itself
    ensure you have a base case so that it doesn't happen infinitely
